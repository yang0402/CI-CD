name: Docker 部署流水线

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      environment:
        description: '选择部署环境'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 10  # 添加任务超时限制
    permissions:
      contents: read
      packages: write

    steps:
      - name: 显示仓库所有者
        run: |
          echo "仓库所有者是: ${{ github.repository_owner }}"

      - name: 检出代码
        uses: actions/checkout@v3
        timeout-minutes: 2

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v2
        timeout-minutes: 1

      - name: 配置缓存
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: 登录到 GHCR
        uses: docker/login-action@v2
        timeout-minutes: 1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: 构建和推送 Docker 镜像
        uses: docker/build-push-action@v4
        timeout-minutes: 10
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/simple-flask-app:latest
            ghcr.io/${{ github.repository_owner }}/simple-flask-app:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: 更新缓存
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: 部署到服务器
        uses: appleboy/ssh-action@v0.1.10
        timeout-minutes: 5
        env:
          OWNER: ${{ github.repository_owner }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          IMAGE_TAG: ${{ github.sha }}
        with:
          host: 118.31.6.172
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: OWNER,GHCR_TOKEN,IMAGE_TAG
          command_timeout: 20m  # 增加命令执行超时时间
          script: |
            set -e
            
            echo "🚀 开始部署 - $(date)"
            
            # 检查并安装 pv 工具用于显示进度
            if ! command -v pv &> /dev/null; then
                apt-get update && apt-get install -y pv
            fi
            
            # 确保 Docker 已安装并运行
            if ! command -v docker &> /dev/null; then
                echo "❌ Docker未安装，正在安装..."
                curl -fsSL https://get.docker.com | sh
            fi
            
            # 登录到 GHCR
            echo "📦 登录到GHCR..."
            echo "${GHCR_TOKEN}" | docker login ghcr.io -u "${OWNER}" --password-stdin
            
            # 停止并移除旧容器
            echo "🛑 清理旧容器..."
            docker stop simple-flask-app 2>/dev/null || true
            docker rm simple-flask-app 2>/dev/null || true
            
            # 拉取新镜像（使用 pv 显示进度）
            echo "⬇️ 拉取新镜像..."
            docker pull ghcr.io/${OWNER}/simple-flask-app:${IMAGE_TAG} 2>&1 | while read line; do echo "$(date '+%H:%M:%S') $line"; done
            docker tag ghcr.io/${OWNER}/simple-flask-app:${IMAGE_TAG} ghcr.io/${OWNER}/simple-flask-app:latest
            
            # 启动新容器
            echo "▶️ 启动新容器..."
            docker run -d \
              --name simple-flask-app \
              --restart unless-stopped \
              --log-opt max-size=10m \
              --log-opt max-file=3 \
              -p 5000:5000 \
              ghcr.io/${OWNER}/simple-flask-app:latest
            
            # 验证容器是否成功启动
            echo "🔍 验证容器状态..."
            for i in {1..30}; do
              if docker ps | grep -q simple-flask-app; then
                echo "✅ 容器成功启动！"
                break
              fi
              if [ $i -eq 30 ]; then
                echo "❌ 容器启动失败！"
                exit 1
              fi
              echo "等待容器启动... ($i/30)"
              sleep 1
            done
            
            # 清理未使用的镜像
            echo "🧹 清理未使用的镜像..."
            docker image prune -f
            
            echo "✅ 部署完成！- $(date)"