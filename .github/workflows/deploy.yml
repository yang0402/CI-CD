# 定义工作流名称
name: GHCR CI/CD Pipeline

# 指定触发工作流的事件
on:
  push:
    branches: [ master ]
  workflow_dispatch:

# 定义工作流中的任务
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/simple-flask-app:latest
      - name: Debug SSH and GHCR
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_IP: 118.31.6.172
          SERVER_USER: root
        run: |
          echo "Repository owner: ${{ github.repository_owner }}"
          sudo apt-get update && sudo apt-get install -y openssh-client
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts
          ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker version && echo 'SSH connection successful'" || exit 1
      - name: Deploy to Server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_IP: 118.31.6.172
          SERVER_USER: root
          DOCKER_IMAGE: ghcr.io/${{ github.repository_owner }}/simple-flask-app:latest
        run: |
          sudo apt-get update && sudo apt-get install -y openssh-client
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts
          ssh $SERVER_USER@$SERVER_IP << 'EOF'
            echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin && echo "GHCR login successful" || exit 1
            docker stop simple-flask-app || true
            docker rm simple-flask-app || true
            docker pull $DOCKER_IMAGE && echo "Docker pull successful" || exit 1
            docker run -d --name simple-flask-app -p 5000:5000 $DOCKER_IMAGE && echo "Docker run successful" || exit 1
          EOF