name: GHCR CI/CD Pipeline

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/simple-flask-app:latest

      - name: Deploy to Server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_IP: 118.31.6.172
          SERVER_USER: root
          OWNER: ${{ github.repository_owner }}
          GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN }}
        run: |
          # 安装 SSH 客户端
          sudo apt-get update && sudo apt-get install -y openssh-client

          # 创建 SSH 目录并写入私钥
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # 清空 known_hosts 并重新添加远程主机
          ssh-keyscan -H $SERVER_IP > ~/.ssh/known_hosts

          # 执行远程部署命令
          ssh -T $SERVER_USER@$SERVER_IP << 'EOF'
            set -e  # 开启错误中断模式

            # 输出当前时间，便于调试
            echo "➡️ $(date) - Starting deployment on server..."

            # 登录 GHCR
            echo "➡️ Logging into GHCR..."
            echo "$GITHUB_TOKEN" | docker login ghcr.io -u $OWNER --password-stdin || { echo "❌ Failed to login to GHCR"; exit 1; }

            # 停止并删除旧容器
            echo "➡️ Stopping and removing old container..."
            docker stop simple-flask-app || true
            docker rm simple-flask-app || true

            # 拉取最新镜像
            echo "➡️ Pulling latest image from GHCR..."
            docker pull ghcr.io/$OWNER/simple-flask-app:latest || { echo "❌ Failed to pull image"; exit 1; }

            # 启动新容器（映射 5000 端口）
            echo "➡️ Starting new container..."
            docker run -d \
              --name simple-flask-app \
              -p 5000:5000 \
              ghcr.io/$OWNER/simple-flask-app:latest || { echo "❌ Failed to start container"; exit 1; }

            # 查看容器状态
            echo "➡️ Checking container status..."
            docker ps -a | grep simple-flask-app

            echo "✅ Deployment completed successfully"
          EOF